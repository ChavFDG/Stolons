// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Stolons.Models;
using Stolons.Models.Messages;
using Stolons.Models.Transactions;
using Stolons.Models.Users;
using System;

namespace Stolons.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180901093813_DbMigrationRememberBase")]
    partial class DbMigrationRememberBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Stolons.Models.AdherentStolon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdherentId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("DisableReason");

                    b.Property<bool>("Enable");

                    b.Property<bool>("IsActiveStolon");

                    b.Property<bool>("IsProducer");

                    b.Property<int>("LocalId");

                    b.Property<int>("ProducerFee");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("Role");

                    b.Property<Guid?>("StolonId");

                    b.Property<bool>("SubscriptionPaid");

                    b.Property<decimal>("Token");

                    b.HasKey("Id");

                    b.HasIndex("AdherentId");

                    b.HasIndex("StolonId");

                    b.ToTable("AdherentStolons");
                });

            modelBuilder.Entity("Stolons.Models.ApplicationConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChromiumFullPath");

                    b.Property<string>("ContactMailAddress");

                    b.Property<string>("ContactPhoneNumber");

                    b.Property<bool>("IsInMaintenance");

                    b.Property<string>("MailAddress");

                    b.Property<string>("MailPassword");

                    b.Property<int>("MailPort");

                    b.Property<string>("MailSmtp");

                    b.Property<string>("MaintenanceMessage");

                    b.Property<string>("StolonsLabel");

                    b.Property<string>("StolonsUrl");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfig");
                });

            modelBuilder.Entity("Stolons.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<Guid?>("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Stolons.Models.BillEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConsumerBillId");

                    b.Property<DateTime>("DLC");

                    b.Property<string>("Description");

                    b.Property<Guid>("FamillyId");

                    b.Property<bool>("HasBeenModified");

                    b.Property<bool>("IsModified");

                    b.Property<string>("LabelsSerialized");

                    b.Property<decimal>("MaximumWeight");

                    b.Property<decimal>("MinimumWeight");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PicturesSerialized");

                    b.Property<Guid?>("ProducerBillId");

                    b.Property<int>("ProducerFee");

                    b.Property<Guid>("ProductStockId");

                    b.Property<int>("ProductUnit");

                    b.Property<int>("Quantity");

                    b.Property<int>("QuantityStep");

                    b.Property<int>("StockManagement");

                    b.Property<Guid?>("StolonsBillId");

                    b.Property<int>("Storage");

                    b.Property<decimal>("Tax");

                    b.Property<Guid?>("TempWeekBasketId");

                    b.Property<int>("Type");

                    b.Property<decimal>("UnitPrice");

                    b.Property<Guid?>("ValidatedWeekBasketId");

                    b.Property<bool>("WeightAssigned");

                    b.Property<decimal>("WeightPrice");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerBillId");

                    b.HasIndex("FamillyId");

                    b.HasIndex("ProducerBillId");

                    b.HasIndex("ProductStockId");

                    b.HasIndex("StolonsBillId");

                    b.HasIndex("TempWeekBasketId");

                    b.HasIndex("ValidatedWeekBasketId");

                    b.ToTable("BillEntrys");
                });

            modelBuilder.Entity("Stolons.Models.ConsumerBill", b =>
                {
                    b.Property<Guid>("BillId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdherentId");

                    b.Property<Guid?>("AdherentStolonId");

                    b.Property<string>("BillNumber");

                    b.Property<DateTime>("EditionDate");

                    b.Property<bool>("HasBeenModified");

                    b.Property<string>("HtmlBillContent");

                    b.Property<string>("ModificationReason");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<decimal>("OrderAmount");

                    b.Property<int>("State");

                    b.Property<decimal>("TokenUsed");

                    b.HasKey("BillId");

                    b.HasIndex("AdherentId");

                    b.HasIndex("AdherentStolonId");

                    b.ToTable("ConsumerBills");
                });

            modelBuilder.Entity("Stolons.Models.Messages.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("DateOfPublication");

                    b.Property<Guid>("PublishByAdherentStolonId");

                    b.HasKey("Id");

                    b.HasIndex("PublishByAdherentStolonId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Stolons.Models.Messages.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("DateOfPublication");

                    b.Property<string>("ImageName");

                    b.Property<bool>("IsHighlight");

                    b.Property<int>("PublishAs");

                    b.Property<Guid>("PublishByAdherentStolonId");

                    b.Property<DateTime>("PublishEnd");

                    b.Property<DateTime>("PublishStart");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PublishByAdherentStolonId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Stolons.Models.ProducerBill", b =>
                {
                    b.Property<Guid>("BillId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdherentId");

                    b.Property<Guid?>("AdherentStolonId");

                    b.Property<string>("BillNumber");

                    b.Property<DateTime>("EditionDate");

                    b.Property<bool>("HasBeenModified");

                    b.Property<string>("HtmlBillContent");

                    b.Property<string>("HtmlOrderContent");

                    b.Property<string>("ModificationReason");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<decimal>("OrderAmount");

                    b.Property<string>("OrderNumber");

                    b.Property<int>("ProducerFee");

                    b.Property<int>("State");

                    b.Property<decimal>("TaxAmount");

                    b.HasKey("BillId");

                    b.HasIndex("AdherentId");

                    b.HasIndex("AdherentStolonId");

                    b.ToTable("ProducerBills");
                });

            modelBuilder.Entity("Stolons.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AverageQuantity");

                    b.Property<DateTime>("DLC");

                    b.Property<string>("Description");

                    b.Property<Guid>("FamillyId");

                    b.Property<bool>("HideWeightPrice");

                    b.Property<bool>("IsArchive");

                    b.Property<bool>("IsModified");

                    b.Property<string>("LabelsSerialized");

                    b.Property<decimal>("MaximumWeight");

                    b.Property<decimal>("MinimumWeight");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PicturesSerialized");

                    b.Property<Guid>("ProducerId");

                    b.Property<int>("ProductUnit");

                    b.Property<int>("QuantityStep");

                    b.Property<int>("StockManagement");

                    b.Property<int>("Storage");

                    b.Property<decimal>("Tax");

                    b.Property<int>("Type");

                    b.Property<decimal>("UnitPrice");

                    b.Property<decimal>("WeightPrice");

                    b.HasKey("Id");

                    b.HasIndex("FamillyId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Stolons.Models.ProductFamilly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanBeRemoved");

                    b.Property<string>("FamillyName");

                    b.Property<string>("Image");

                    b.Property<Guid?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ProductFamillys");
                });

            modelBuilder.Entity("Stolons.Models.ProductStockStolon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdherentStolonId");

                    b.Property<Guid>("ProductId");

                    b.Property<decimal>("RemainingStock");

                    b.Property<int>("State");

                    b.Property<decimal>("WeekStock");

                    b.HasKey("Id");

                    b.HasIndex("AdherentStolonId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsStocks");
                });

            modelBuilder.Entity("Stolons.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanBeRemoved");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Stolons.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageName");

                    b.Property<string>("Name");

                    b.Property<Guid>("StolonId");

                    b.HasKey("Id");

                    b.HasIndex("StolonId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Stolons.Models.Stolon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutText");

                    b.Property<string>("Address");

                    b.Property<int>("BasketPickEndUpDay");

                    b.Property<int>("BasketPickUpEndHour");

                    b.Property<int>("BasketPickUpEndMinute");

                    b.Property<int>("BasketPickUpStartDay");

                    b.Property<int>("BasketPickUpStartHour");

                    b.Property<int>("BasketPickUpStartMinute");

                    b.Property<decimal>("ConsumerSubscription");

                    b.Property<string>("ContactMailAddress");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("DefaultProducersFee");

                    b.Property<int>("DeliveryAndStockUpdateDayStartDate");

                    b.Property<int>("DeliveryAndStockUpdateDayStartDateHourStartDate");

                    b.Property<int>("DeliveryAndStockUpdateDayStartDateMinuteStartDate");

                    b.Property<string>("FacebookPage");

                    b.Property<bool>("GoodPlan");

                    b.Property<bool>("IsModeSimulated");

                    b.Property<string>("JoinUsText");

                    b.Property<string>("Label");

                    b.Property<double>("Latitude");

                    b.Property<string>("LogoFileName");

                    b.Property<double>("Longitude");

                    b.Property<int>("OrderDayStartDate");

                    b.Property<string>("OrderDeliveryMessage");

                    b.Property<int>("OrderHourStartDate");

                    b.Property<int>("OrderMinuteStartDate");

                    b.Property<string>("PhoneNumber");

                    b.Property<decimal>("ProducerSubscription");

                    b.Property<string>("ShortLabel");

                    b.Property<int>("SimulationMode");

                    b.Property<int>("State");

                    b.Property<string>("StolonStateMessage");

                    b.Property<int>("StolonType");

                    b.Property<bool>("SubscriptionPaid");

                    b.Property<int>("SubscriptionStartMonth");

                    b.Property<decimal>("SympathizerSubscription");

                    b.Property<bool>("UseHalftSubscipstion");

                    b.Property<bool>("UseProducersFee");

                    b.Property<bool>("UseSubscipstion");

                    b.Property<bool>("UseSympathizer");

                    b.HasKey("Id");

                    b.ToTable("Stolons");
                });

            modelBuilder.Entity("Stolons.Models.StolonsBill", b =>
                {
                    b.Property<Guid>("StolonBillId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("BillNumber");

                    b.Property<int>("Consumers");

                    b.Property<DateTime>("EditionDate");

                    b.Property<decimal>("FeeAmount");

                    b.Property<bool>("HasBeenModified");

                    b.Property<string>("HtmlBillContent");

                    b.Property<string>("ModificationReason");

                    b.Property<int>("Producers");

                    b.Property<Guid>("StolonId");

                    b.HasKey("StolonBillId");

                    b.HasIndex("StolonId");

                    b.ToTable("StolonsBills");
                });

            modelBuilder.Entity("Stolons.Models.TempWeekBasket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdherentStolonId");

                    b.HasKey("Id");

                    b.HasIndex("AdherentStolonId");

                    b.ToTable("TempsWeekBaskets");
                });

            modelBuilder.Entity("Stolons.Models.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AddedAutomaticly");

                    b.Property<decimal>("Amount");

                    b.Property<int>("Category");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid>("StolonId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("StolonId");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("Stolons.Models.Users.Adherent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<decimal>("Area");

                    b.Property<string>("AvatarFileName");

                    b.Property<string>("City");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Email");

                    b.Property<string>("ExploitationPicuresSerialized");

                    b.Property<bool>("IsWebAdmin");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OpenText");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostCode")
                        .IsRequired();

                    b.Property<string>("Production");

                    b.Property<bool>("ReceivedGoodPlanByEmail");

                    b.Property<bool>("ReceivedInformationsEmail");

                    b.Property<bool>("ReceivedProductListByEmail");

                    b.Property<int>("SellerType");

                    b.Property<int>("StartDate");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<string>("WebSiteLink");

                    b.HasKey("Id");

                    b.ToTable("Adherents");
                });

            modelBuilder.Entity("Stolons.Models.Users.Sympathizer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PostCode")
                        .IsRequired();

                    b.Property<bool>("ReceivedInformationsEmail");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<Guid>("StolonId");

                    b.Property<bool>("SubscriptionPaid");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("StolonId");

                    b.ToTable("Sympathizers");
                });

            modelBuilder.Entity("Stolons.Models.ValidatedWeekBasket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdherentStolonId");

                    b.HasKey("Id");

                    b.HasIndex("AdherentStolonId");

                    b.ToTable("ValidatedWeekBaskets");
                });

            modelBuilder.Entity("Stolons.Models.Transactions.AdherentTransaction", b =>
                {
                    b.HasBaseType("Stolons.Models.Transactions.Transaction");

                    b.Property<Guid>("AdherentId");

                    b.HasIndex("AdherentId");

                    b.ToTable("AdherentTransaction");

                    b.HasDiscriminator().HasValue("AdherentTransaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Stolons.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Stolons.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stolons.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Stolons.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.AdherentStolon", b =>
                {
                    b.HasOne("Stolons.Models.Users.Adherent", "Adherent")
                        .WithMany("AdherentStolons")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stolons.Models.Stolon", "Stolon")
                        .WithMany("UserStolons")
                        .HasForeignKey("StolonId");
                });

            modelBuilder.Entity("Stolons.Models.ApplicationUser", b =>
                {
                    b.HasOne("Stolons.Models.Users.Adherent", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Stolons.Models.BillEntry", b =>
                {
                    b.HasOne("Stolons.Models.ConsumerBill", "ConsumerBill")
                        .WithMany("BillEntries")
                        .HasForeignKey("ConsumerBillId");

                    b.HasOne("Stolons.Models.ProductFamilly", "Familly")
                        .WithMany()
                        .HasForeignKey("FamillyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stolons.Models.ProducerBill", "ProducerBill")
                        .WithMany("BillEntries")
                        .HasForeignKey("ProducerBillId");

                    b.HasOne("Stolons.Models.ProductStockStolon", "ProductStock")
                        .WithMany("BillEntries")
                        .HasForeignKey("ProductStockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stolons.Models.StolonsBill", "StolonsBill")
                        .WithMany("BillEntries")
                        .HasForeignKey("StolonsBillId");

                    b.HasOne("Stolons.Models.TempWeekBasket", "TempWeekBasket")
                        .WithMany("BillEntries")
                        .HasForeignKey("TempWeekBasketId");

                    b.HasOne("Stolons.Models.ValidatedWeekBasket", "ValidatedWeekBasket")
                        .WithMany("BillEntries")
                        .HasForeignKey("ValidatedWeekBasketId");
                });

            modelBuilder.Entity("Stolons.Models.ConsumerBill", b =>
                {
                    b.HasOne("Stolons.Models.Users.Adherent")
                        .WithMany("ConsumerBills")
                        .HasForeignKey("AdherentId");

                    b.HasOne("Stolons.Models.AdherentStolon", "AdherentStolon")
                        .WithMany("ConsumerBills")
                        .HasForeignKey("AdherentStolonId");
                });

            modelBuilder.Entity("Stolons.Models.Messages.ChatMessage", b =>
                {
                    b.HasOne("Stolons.Models.AdherentStolon", "PublishBy")
                        .WithMany()
                        .HasForeignKey("PublishByAdherentStolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.Messages.News", b =>
                {
                    b.HasOne("Stolons.Models.AdherentStolon", "PublishBy")
                        .WithMany("News")
                        .HasForeignKey("PublishByAdherentStolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.ProducerBill", b =>
                {
                    b.HasOne("Stolons.Models.Users.Adherent")
                        .WithMany("ProducerBills")
                        .HasForeignKey("AdherentId");

                    b.HasOne("Stolons.Models.AdherentStolon", "AdherentStolon")
                        .WithMany("ProducerBills")
                        .HasForeignKey("AdherentStolonId");
                });

            modelBuilder.Entity("Stolons.Models.Product", b =>
                {
                    b.HasOne("Stolons.Models.ProductFamilly", "Familly")
                        .WithMany()
                        .HasForeignKey("FamillyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stolons.Models.Users.Adherent", "Producer")
                        .WithMany("Products")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.ProductFamilly", b =>
                {
                    b.HasOne("Stolons.Models.ProductType", "Type")
                        .WithMany("ProductFamilly")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Stolons.Models.ProductStockStolon", b =>
                {
                    b.HasOne("Stolons.Models.AdherentStolon", "AdherentStolon")
                        .WithMany()
                        .HasForeignKey("AdherentStolonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stolons.Models.Product", "Product")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.Service", b =>
                {
                    b.HasOne("Stolons.Models.Stolon", "Stolon")
                        .WithMany("Services")
                        .HasForeignKey("StolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.StolonsBill", b =>
                {
                    b.HasOne("Stolons.Models.Stolon", "Stolon")
                        .WithMany()
                        .HasForeignKey("StolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.TempWeekBasket", b =>
                {
                    b.HasOne("Stolons.Models.AdherentStolon", "AdherentStolon")
                        .WithMany()
                        .HasForeignKey("AdherentStolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.Transactions.Transaction", b =>
                {
                    b.HasOne("Stolons.Models.Stolon", "Stolon")
                        .WithMany()
                        .HasForeignKey("StolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.Users.Sympathizer", b =>
                {
                    b.HasOne("Stolons.Models.Stolon", "Stolon")
                        .WithMany()
                        .HasForeignKey("StolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.ValidatedWeekBasket", b =>
                {
                    b.HasOne("Stolons.Models.AdherentStolon", "AdherentStolon")
                        .WithMany()
                        .HasForeignKey("AdherentStolonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stolons.Models.Transactions.AdherentTransaction", b =>
                {
                    b.HasOne("Stolons.Models.Users.Adherent", "Adherent")
                        .WithMany("Transactions")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
