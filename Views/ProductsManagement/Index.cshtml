@model ProductsViewModel
@using Stolons.Helpers
@using Stolons.Models
@using Stolons.ViewModels.ProductsManagement

<h2>Gestion de mes produits et de mes stocks</h2>

<p>
    <a asp-action="Manage" class="btn btn-small btn-default">Ajouter un produit</a>
</p>
<table class="table productsMgtTable">
    <tr>
        <th></th>
        <th>
            Image
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Producer.Products.First().Name)
        </th>
        <th>
            Prix
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Producer.Products.First().Type)
        </th>

        @foreach (var adherentStolon in Model.Producer.AdherentStolons.Where(x => x.IsProducer).OrderBy(x => x.Id))
        {
            <th>
                <div>
                    @(adherentStolon.Stolon.Label + "(" + adherentStolon.ProducerFee + "%)")
                </div>
                <div>
                    @("(" + EnumHelper<Stolon.Modes>.GetDisplayValue(adherentStolon.Stolon.GetMode()) + ")")
                </div>
                @if (adherentStolon.Stolon.GetMode() == Stolon.Modes.DeliveryAndStockUpdate)
                {
                    <div class="dropdown">
                        <a class="dropdown-toggle btn btn-small btn-default" data-toggle="dropdown" href="#">
                            Actions
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <a asp-action="DisableAllProductForStolon" asp-route-adherentStolonId="@adherentStolon.Id">Désactiver tout les produits</a>
                            </li>
                            @if (Model.Products.Any(x => x.ProductStocks.Any(prodStock => prodStock.State == Product.ProductState.Stock)))
                            {
                                <li>
                                    <a asp-action="EnableAllStockProductForStolon" asp-route-adherentStolonId="@adherentStolon.Id">Rendre disponible tout les produits en attente de stock</a>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </th>
        }
        <th>
        </th>
    </tr>

    @foreach (var item in Model.Products.Where(x => !x.IsArchive))
    {
        <tr>
            <td>
                <a data-productId="@item.Id" class="productPreview btn btn-small btn-default" title="">Aperçu vitrine</a>
            </td>
            <td class="productMgtImage">
                <div>
                    @{
                        if (item.Pictures.Any())
                        {
                            <img src="@(Configurations.ProductsStockagePathLight + "\\" +item.Pictures[0])" />
                        }
                        else
                        {
                            <img alt="Pas d'image" />
                        }
                    }
                </div>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)


                @if (!item.ProductStocks.Any(x => (x.State == Product.ProductState.Enabled && x.AdherentStolon.Stolon.GetMode() == Stolon.Modes.Order)))
                {
                    <div class="dropdown">
                        <a class="dropdown-toggle btn btn-small btn-default" data-toggle="dropdown" href="#">
                            Modifier
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <a asp-action="Manage" asp-route-id="@item.Id"> Modifier</a>
                            </li>
                            <li>
                                @Html.ActionLink("Archiver",
                                    "Archive",
                                    "ProductsManagement",
                                    new { id = @item.Id },
                                    new { onclick = "return confirm('Êtes vous sur de vouloir archiver le produit " + item.Name + " ?');" })
                            </li>
                            @if (!item.ProductStocks.Any(x => x.BillEntries.Count != 0))
                            {
                                <li>
                                    @Html.ActionLink("Supprimer",
                                    "Delete",
                                    "ProductsManagement",
                                    new { id = @item.Id },
                                    new { onclick = "return confirm('Êtes vous sur de vouloir supprimer définitivement le produit " + item.Name + " ?');" })
                                </li>
                            }
                        </ul>
                    </div>
                }
            </td>
            <td>
                @Html.DisplayFor(model => item.UnitPrice) @("€")
                @{
                    @if (item.Type == Product.SellType.Weigh)
                    {
                        @(" par ")
                        @Html.DisplayFor(model => item.QuantityStepString)
                    }
                    @if (!item.HideWeightPrice && item.WeightPrice != 0)
                    {
                        <br />
                        @Html.DisplayFor(model => item.WeightPrice)@("€/")
                        @Html.DisplayFor(model => item.ProductUnit)
                    }
                }
            </td>
            <td>
                Vente : @(EnumHelper<Product.SellType>.GetDisplayValue(@item.Type))
                <br />
                Stock : @(EnumHelper<Product.StockType>.GetDisplayValue(@item.StockManagement))
            </td>

            @foreach (var productStock in item.ProductStocks.OrderBy(x => x.AdherentStolonId))
            {
                string color = "";
                switch (productStock.State)
                {
                    case Product.ProductState.Disabled:
                        color = "#cb2431";
                        break;
                    case Product.ProductState.Enabled:
                        color = "#2cbe4e";
                        break;
                    case Product.ProductState.Stock:
                        color = "#ff8000";
                        break;
                }
                string stockManagementLabel = "";
                @if (productStock.AdherentStolon.Stolon.GetMode() == Stolon.Modes.Order || item.StockManagement == Product.StockType.Fixed)
                {
                    stockManagementLabel = Html.DisplayNameFor(model => productStock.RemainingStock)
                                            + " : "
                                            + productStock.Product.GetQuantityString(productStock.RemainingStock);

                }
                else
                {
                    stockManagementLabel = Html.DisplayNameFor(model => productStock.WeekStock)
                                           + " : "
                                           + productStock.Product.GetQuantityString(productStock.WeekStock);
                }

                <td bgcolor="@(color)">
                    @if (productStock.Product.StockManagement != Product.StockType.Unlimited)
                    {
                        <input class="btn btn-default disabled" disabled type="submit" style="color: '@(color)';" value="@stockManagementLabel" onclick="StockMgtViewModal.open(this, '@productStock.Id')" />
                        <span class="glyphicon glyphicon-refresh glyphicon-refresh-animate loading-products"></span>
                    }
                    else
                    {
                        <input class="btn small default" type="submit" value="Illimité" disabled />
                    }
                    <br />
                    <div class="dropdown">
                        <a class="dropdown-toggle btn btn-small btn-default" data-toggle="dropdown" href="#">
                            @(EnumHelper<Product.ProductState>.GetDisplayValue(productStock.State))
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            @if (productStock.AdherentStolon.Stolon.GetMode() == Stolon.Modes.DeliveryAndStockUpdate)
                            {
                                if (productStock.State == Product.ProductState.Enabled)
                                {
                                    <li>
                                        <a asp-action="Disable" asp-route-id="@productStock.Id">Rendre indisponible</a>
                                    </li>
                                }
                            }
                            @if (productStock.State != Product.ProductState.Enabled)
                            {
                                <li>
                                    <a asp-action="Enable" asp-route-id="@productStock.Id">Rendre disponible</a>
                                </li>
                            }
                        </ul>
                    </div>
                </td>
            }
        </tr>
    }
</table>

<div id="stockMgt" class="modals">
</div>

<script id="stockMgtTemplate" type="text/template">
    <div class="modals modal in">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                </div>
                <div class="modal-body">
                    <div>
                        <span><b>Changer le stock pour le produit : <i><%= productStock.get("Product").get("Name") %></i></b></span>
                    </div>
                    <div class="form-horizontal stockManagementWrapper">
                        <div class="form-group">
                            <div><label>Vente : </label> <%= productStock.getSellTypeString() %></div>
                            <div><label>Gestion du stock : </label> <%= productStock.getStockManagementString() %></div>
                            <% if (productStock.get("AdherentStolon").Stolon.Mode == 1 && productStock.get("Product").get("StockManagement") != 1) { %> <!-- Livraisons/stocks et gestion Hebdomadaire -->

                            <label for="WeekStock" class="control-label">Stock proposé pour la semaine prochaine:</label>
                            <input id="WeekStock" name="WeekStock" min="0" type="number" step="<%= productStock.get(" Product").QuantityStep / 1000 || 1 %>" value="<%= productStock.getWeekQuantityStock() %>" />
                            <span><%= productStock.getStockUnitString() %></span>
                            <% } else { %> <!-- Commandes -->
                            <!-- Stock a la semaine -->
                            <% if (productStock.get("Product").get("StockManagement") == 0) { %>
                            <label class="control-label">Stock proposé cette semaine :  </label>
                            <span><%= productStock.getWeekQuantityStock() %> (<%= productStock.getWeekQuantityOrdered() %> commandés par les utilisateurs)</span>
                            <span><%= productStock.getStockUnitString() %></span>
                            <% } %>
                            <div>
                                <label for="RemainingStock" class="control-label">Il reste en stock : </label>
                                <input id="RemainingStock" name="RemainingStock" min="0" type="number" step="<%= productStock.get(" Product").get("QuantityStep") / 1000 || 1 %>" value="<%= productStock.getRemainingQuantityStock() %>" />
                                <span><%= productStock.getStockUnitString() %></span>
                                <div>
                                    <% if (productStock.get("OrderedQuantityString") > 0) { %>
                                    <span><%= productStock.get("OrderedQuantityString") %> ont déjà été commandé(e)s. </span>
                                    <span>Attention: modifications possibles jusqu'à la cloture des commandes.</span>
                                    <% } %>
                                </div>
                                <% } %>
                            </div>
                        </div>
                        <span id="WeekStockError" class="text-danger"><%= validation.weekStockError %></span>
                        <span id="RemainingStockError" class="text-danger"><%= validation.remainingStockError %></span>
                        <div class="row">
                            <a id="saveStocks" class="btn btn-small btn-default" <% if (!_.isEmpty(validation.weekStockError) || !_.isEmpty(validation.remainingStockError)) { %> disabled="disabled" <% } %> >Enregistrer les modifications</a>
                            <a id="cancel" class="btn btn-small btn-default">Annuler</a>
                            <div class="col-md-4">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
</script>



<h2>Mes produits archivés</h2>
@if (Model.Products.Where(x => x.IsArchive).Any())
{
    <table class="table">
        <tr>
            <th>
                Image
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Producer.Products.First().Name)
            </th>
            <th>
                Prix
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Producer.Products.First().Type)
            </th>
            <th>
            </th>
        </tr>

        @foreach (var item in Model.Products.Where(x => x.IsArchive))
        {
            <tr>
                <td class="productMgtImage">
                    <div>
                        @{
                            if (item.Pictures.Any())
                            {
                                <img src="@(Configurations.ProductsStockagePathLight + "\\" +item.Pictures[0])" />
                            }
                            else
                            {
                                <img alt="Pas d'image" />
                            }
                        }
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)


                    @if (!item.ProductStocks.Any(x => (x.State == Product.ProductState.Enabled && x.AdherentStolon.Stolon.GetMode() == Stolon.Modes.Order)))
                    {
                        <div class="dropdown">
                            <a class="dropdown-toggle btn btn-small btn-default" data-toggle="dropdown" href="#">
                                Modifier
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu">
                                <li>
                                    <a asp-action="Manage" asp-route-id="@item.Id"> Modifier</a>
                                </li>
                                <li>
                                    @Html.ActionLink("Dé-archiver",
                                    "UnArchive",
                                    "ProductsManagement",
                                    new { id = @item.Id },
                                    new { onclick = "return confirm('Êtes vous sur de vouloir dé-archiver le produit " + item.Name + " ?');" })
                                </li>
                                @if (!item.ProductStocks.Any(x => x.BillEntries.Count != 0))
                                {
                                    <li>
                                        @Html.ActionLink("Supprimer",
                                    "Delete",
                                    "ProductsManagement",
                                    new { id = @item.Id },
                                    new { onclick = "return confirm('Êtes vous sur de vouloir supprimer définitivement le produit " + item.Name + " ?');" })
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </td>
                <td>
                    @Html.DisplayFor(model => item.UnitPrice) @("€")
                    @{
                        @if (item.QuantityStep != 0)
                        {
                            @(" par ")
                            @Html.DisplayFor(model => item.QuantityStepString)
                        }
                        @if (!item.HideWeightPrice && item.WeightPrice != 0)
                        {
                            <br />
                            @Html.DisplayFor(model => item.WeightPrice)@("€/")
                            @Html.DisplayFor(model => item.ProductUnit)
                        }
                    }
                </td>
                <td>
                    Vente : @(EnumHelper<Product.SellType>.GetDisplayValue(@item.Type))
                    <br />
                    Stock : @(EnumHelper<Product.StockType>.GetDisplayValue(@item.StockManagement))
                </td>
            </tr>
        }
    </table>

}
else
{
    <p>
        Aucun produit archivé.
    </p>

}

<!-- Include the public product template -->
@{ await Html.RenderPartialAsync("Templates/PublicProductTemplate"); }

<script src="/js/productModel.js"></script>
<script src="/js/productsManagement.js"></script>
