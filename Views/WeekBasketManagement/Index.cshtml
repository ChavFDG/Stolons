@model Stolons.ViewModels.WeekBasketManagement.VmWeekBasketManagement
@using Stolons.Helpers
@using Stolons.Models
@using Stolons.Tools


<h2>Gestion des paniers</h2>
@if (Model.Stolon.GetMode() == Stolon.Modes.DeliveryAndStockUpdate && Model.WeekStolonsBill != null)
{
    <h4>Les paniers de la semaine </h4>
    <a href="@Model.WeekStolonsBill.UrlPath" class="btn btn-small btn-default">Télécharger les factures utilisateur de la semaine</a>
    <p> </p>
    <a asp-action="ShowStolonsBill" asp-route-id="@Model.WeekStolonsBill.BillNumber" class="btn btn-small btn-default">Afficher les factures utilisateur de la semaine</a>
}

<div class="boxContainer">
<h4>Facture à régler aux producteurs </h4>
@if (Model.ProducerBills.Any(x => x.State == BillState.Delivered))
{
    <table class="table">
        <tr>
            <th>
                Numéro
            </th>
            <th>
                Raison social
            </th>
            <th>
                Téléphone
            </th>
            <th>
                Etat
            </th>
            <th>
                Facture
            </th>
        </tr>
        @foreach (var item in Model.ProducerBills.Where(x => x.State == BillState.Delivered))
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.AdherentStolon.LocalId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.CompanyName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.PhoneNumber)
                </td>
                <td>
                    @if (Model.ActiveAdherentStolon.Authorized(Role.Admin) || Model.ActiveAdherentStolon.Adherent.IsWebAdmin)
                    {
                        @Html.ActionLink(
                                   "Valider paiement de la facture",
                                  "UpdateProducerBill",
                                    new { billNumber = item.BillNumber },
                                    new { onclick = "return confirm('Confirmation du paiement de " + +item.BillAmount + " à " + item.Adherent.CompanyName + "');" })
                    }
                   </td>
                <td>
                    @{
                        <a href="@Configurations.GetBillUrl(item)">@(item.BillAmount + "€" + " (" + item.FeeAmount + "€) - " + item.BillNumber)</a>
                    }
                </td>
            </tr>
    }
    </table>
}
else
{
    <p>Aucune facture à régler</p>
}

</div>

<div class="boxContainer">
<h4>Producteur ayant une commande à livrer cette semaine </h4>
@if (Model.ProducerBills.Any(x => x.State == BillState.Pending))
{
    <table class="table">
        <tr>
            <th>
                Numéro
            </th>
            <th>
                Raison social
            </th>
            <th>
                Téléphone
            </th>
            <th>
                Etat
            </th>
            <th>
                Facture
            </th>
        </tr>
        @foreach (var item in Model.ProducerBills.Where(x => x.State == BillState.Pending))
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.CompanyName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.PhoneNumber)
                </td>
                <td>
                    @Html.ActionLink(
                                   "Valider la livraison",
                                  "UpdateProducerBill",
                                    new { billNumber = item.BillNumber },
                                    new { onclick = "return confirm('Confirmation de la livraison de " + item.Adherent.CompanyName + "');" })
                </td>
                <td>
                    @{
                        <a href="@Configurations.GetBillUrl(item)">@(item.BillNumber)</a>
                    }
                </td>
            </tr>
    }
    </table>
}
else
{
    <p>Plus de command à livrer ou payer par / aux producteurs</p>
}
</div>

<div class="boxContainer">
<h4>Adhérents ayant commandé un panier cette semaine</h4>
@if (Model.ConsumerBills.Any())
{
    <table class="table">
        <tr>
            <th>
                Numéro
            </th>
            <th>
                Nom
            </th>
            <th>
                Prénom
            </th>
            <th>
                Téléphone
            </th>
            <th>
                Stols
            </th>
            <th>
                Etat
            </th>
            <th>
                Facture
            </th>
        </tr>
        @foreach (var item in Model.ConsumerBills)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.Surname)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adherent.PhoneNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AdherentStolon.Token)Ṩ
                </td>
                <td>
                    <a href="#" class="btn btn-small btn-default open-consumer-modal" billNumber="@item.BillNumber" canUseToken="@(Convert.ToInt32(item.AdherentStolon.Token >= item.OrderAmount))">Valider la récupération et le paiement</a>
                </td>
                <td>
                    @{
                        <a href="@Configurations.GetBillUrl(item)">@(item.OrderAmount +"€ - " + item.BillNumber)</a>
                    }
                </td>
            </tr>
        }
    </table>
}
else
{
    <p>Plus de panier cette semaine</p>
}
</div>

<div id="consumerBillModal" class="modal fade"></div>

<script id="consumerBillModalTemplate" type="text/template">
    <div class="modals">
        <div class="modal-dialog" style="width: 250px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                </div>
                <div class="modal-body">
                    <% if (canUseToken == 1) { %>
                        <a href="/WeekBasketManagement/UpdateConsumerBill?paymentMode=0&billNumber=<%= billNumber %>" class="credit btn btn-small btn-default">Stols</a>
                    <% } else {%>
                        <a href="#" class="credit btn btn-small btn-default disabled">Stols</a>
                    <% }%>
                    <a href="/WeekBasketManagement/UpdateConsumerBill?paymentMode=1&billNumber=<%= billNumber %>" class="credit btn btn-small btn-default">Chèque</a>
                    <a href="/WeekBasketManagement/UpdateConsumerBill?paymentMode=2&billNumber=<%= billNumber %>" class="credit btn btn-small btn-default">Espèces</a>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    ConsumerBillModalView = Backbone.View.extend({
        el: '#consumerBillModal',
        template: _.template($("#consumerBillModalTemplate").html()),
        open: function (bill, canUseToken) {
            this.render(bill, canUseToken);
        },
        render: function (bill, canUseToken) {
            this.$el.html(this.template({ billNumber: bill, canUseToken: canUseToken }));
            this.$el.modal('show');
        }
    });

    $( function() {
        var consumerBillModalView = new ConsumerBillModalView();
        $('a.open-consumer-modal').click(function () {
            consumerBillModalView.open($(this).attr('billNumber'), $(this).attr('canUseToken')); 
            return false;
        });
    } );
</script>
