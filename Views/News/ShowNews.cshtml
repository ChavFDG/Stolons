@using System.Security.Claims
@using Stolons.Services
@using Stolons.Models.Users
@using Stolons.Models.Messages
@using Stolons.ViewModels.News

@model NewsListViewModel

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager



@if (SignInManager.IsSignedIn(User))
{
    if (Model.ActiveAdherentStolon.IsProducer || Model.ActiveAdherentStolon.Authorized(Role.Volunteer))
    {
        <p>
            <a asp-action="Create" asp-controller="News" class="btn btn-small btn-default">Ajouter une nouvelle</a>
        </p>
    }
}
<div>

    @{
        List<News> news = new List<News>();
        if (Model.News.Any())
        {
            Model.News.Where(x => x.IsHighlight).OrderByDescending(x => x.PublishEnd).ToList().ForEach(x => news.Add(x));
            Model.News.Where(x => !x.IsHighlight).OrderByDescending(x => x.PublishEnd).ToList().ForEach(x => news.Add(x));
        }
        else
        {

            <span>Aucune nouvelle pour l'instant </span>

        }
    }

    @foreach (var item in news)
    {
        <div class="newsListItem clearfix @(item.IsHighlight ? "newsListItemHighLight" : "") @(item.PublishEnd < DateTime.Now ? "oldNews" : "") ">
            <div class="newsListItemTitle">@Html.DisplayFor(modelItem => item.Title)</div>
            <div class="newsListItemContent clearfix">
                @if (!String.IsNullOrWhiteSpace(item.ImageLink))
                {
                    <div class="newsListItemContentImg">
                        <img src="@Configurations.GetUrl(item.ImageLink)" class="newsThumnail responsiveImage">
                    </div>
                }
                @Html.Raw(item.Content)
            </div>
            <div class="newsListItemBottom">
                <div class="nextToDiv">
                    @switch (item.PublishAs)
                    {
                        case Stolons.Models.Messages.NewsPublishAs.Producer:
                            <img class="avatar userNewsAvatar" src="@item.PublishBy.Adherent.AvatarFilePath" />
                            break;
                        case Stolons.Models.Messages.NewsPublishAs.Stolon:
                            <img class="avatar userNewsAvatar" src="@item.PublishBy.Stolon.LogoFilePath" />
                            break;
                    }
                </div>
                @switch (item.PublishAs)
                {
                    case Stolons.Models.Messages.NewsPublishAs.Producer:
		        <a href="/PublicProducers/#@item.PublishBy.Adherent.Id">@(item.PublishBy.Adherent.CompanyName)</a>
                        break;
                    case Stolons.Models.Messages.NewsPublishAs.Stolon:
                        @item.PublishBy.Stolon.Label
                        break;
                }
                @item.DateOfPublication.ToString("le dd/MM/yyyy à HH:mm:ss")
                @if (User.Identity.Name == item.PublishBy.Adherent.Email || Model.ActiveAdherentStolon.Authorized(Role.Volunteer))
                {
                    <a asp-action="Edit" asp-controller="News" asp-route-id="@item.Id" class="btn btn-small btn-default">Modifier</a>
                }
                @if (UserManager.GetUserId(User) == item.PublishBy.Adherent.Email || Model.ActiveAdherentStolon.Authorized(Role.Admin))
                {
                    <a asp-action="Delete" asp-controller="News" asp-route-id="@item.Id" class="btn btn-small btn-default">Supprimer</a>
                }
            </div>
        </div>
            @if (!item.IsHighlight)
            {
                <div class="newsListItemSeparator"></div>
            }
    }
    @if (!Model.OldNews)
    {
        <div class="newsShowAll">
            <a asp-action="ShowAllNews" asp-controller="Home" class="btn btn-small btn-default">Voir les anciennes nouvelles</a>
        </div>
    }

</div>
